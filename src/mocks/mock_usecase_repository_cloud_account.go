// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/cloud_account (interfaces: IRepositoryCloudAccount)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryCloudAccount is a mock of IRepositoryCloudAccount interface.
type MockIRepositoryCloudAccount struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryCloudAccountMockRecorder
}

// MockIRepositoryCloudAccountMockRecorder is the mock recorder for MockIRepositoryCloudAccount.
type MockIRepositoryCloudAccountMockRecorder struct {
	mock *MockIRepositoryCloudAccount
}

// NewMockIRepositoryCloudAccount creates a new mock instance.
func NewMockIRepositoryCloudAccount(ctrl *gomock.Controller) *MockIRepositoryCloudAccount {
	mock := &MockIRepositoryCloudAccount{ctrl: ctrl}
	mock.recorder = &MockIRepositoryCloudAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryCloudAccount) EXPECT() *MockIRepositoryCloudAccountMockRecorder {
	return m.recorder
}

// ActiveDeactiveCloudAccount mocks base method.
func (m *MockIRepositoryCloudAccount) ActiveDeactiveCloudAccount(arg0 int64, arg1 bool) (*entity.EntityCloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveDeactiveCloudAccount", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntityCloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveDeactiveCloudAccount indicates an expected call of ActiveDeactiveCloudAccount.
func (mr *MockIRepositoryCloudAccountMockRecorder) ActiveDeactiveCloudAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveDeactiveCloudAccount", reflect.TypeOf((*MockIRepositoryCloudAccount)(nil).ActiveDeactiveCloudAccount), arg0, arg1)
}

// CreateCloudAccount mocks base method.
func (m *MockIRepositoryCloudAccount) CreateCloudAccount(arg0 *entity.EntityCloudAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCloudAccount indicates an expected call of CreateCloudAccount.
func (mr *MockIRepositoryCloudAccountMockRecorder) CreateCloudAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudAccount", reflect.TypeOf((*MockIRepositoryCloudAccount)(nil).CreateCloudAccount), arg0)
}

// DeleteCloudAccount mocks base method.
func (m *MockIRepositoryCloudAccount) DeleteCloudAccount(arg0 *entity.EntityCloudAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCloudAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCloudAccount indicates an expected call of DeleteCloudAccount.
func (mr *MockIRepositoryCloudAccountMockRecorder) DeleteCloudAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloudAccount", reflect.TypeOf((*MockIRepositoryCloudAccount)(nil).DeleteCloudAccount), arg0)
}

// GetAll mocks base method.
func (m *MockIRepositoryCloudAccount) GetAll(arg0 entity.SearchEntityCloudAccountParams) ([]entity.EntityCloudAccount, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]entity.EntityCloudAccount)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRepositoryCloudAccountMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRepositoryCloudAccount)(nil).GetAll), arg0)
}

// GetByID mocks base method.
func (m *MockIRepositoryCloudAccount) GetByID(arg0 int64) (*entity.EntityCloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*entity.EntityCloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositoryCloudAccountMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepositoryCloudAccount)(nil).GetByID), arg0)
}

// UpdateCloudAccount mocks base method.
func (m *MockIRepositoryCloudAccount) UpdateCloudAccount(arg0 *entity.EntityCloudAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCloudAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCloudAccount indicates an expected call of UpdateCloudAccount.
func (mr *MockIRepositoryCloudAccountMockRecorder) UpdateCloudAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCloudAccount", reflect.TypeOf((*MockIRepositoryCloudAccount)(nil).UpdateCloudAccount), arg0)
}
