// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/holiday (interfaces: IRepositoryHoliday)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryHoliday is a mock of IRepositoryHoliday interface.
type MockIRepositoryHoliday struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryHolidayMockRecorder
}

// MockIRepositoryHolidayMockRecorder is the mock recorder for MockIRepositoryHoliday.
type MockIRepositoryHolidayMockRecorder struct {
	mock *MockIRepositoryHoliday
}

// NewMockIRepositoryHoliday creates a new mock instance.
func NewMockIRepositoryHoliday(ctrl *gomock.Controller) *MockIRepositoryHoliday {
	mock := &MockIRepositoryHoliday{ctrl: ctrl}
	mock.recorder = &MockIRepositoryHolidayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryHoliday) EXPECT() *MockIRepositoryHolidayMockRecorder {
	return m.recorder
}

// CheckDateExists mocks base method.
func (m *MockIRepositoryHoliday) CheckDateExists(arg0 time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDateExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDateExists indicates an expected call of CheckDateExists.
func (mr *MockIRepositoryHolidayMockRecorder) CheckDateExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDateExists", reflect.TypeOf((*MockIRepositoryHoliday)(nil).CheckDateExists), arg0)
}

// Create mocks base method.
func (m *MockIRepositoryHoliday) Create(arg0 *entity.EntityHoliday) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryHolidayMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepositoryHoliday)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIRepositoryHoliday) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositoryHolidayMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepositoryHoliday)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockIRepositoryHoliday) GetAll(arg0 entity.SearchEntityHolidayParams) ([]entity.EntityHoliday, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]entity.EntityHoliday)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRepositoryHolidayMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRepositoryHoliday)(nil).GetAll), arg0)
}

// GetFromID mocks base method.
func (m *MockIRepositoryHoliday) GetFromID(arg0 int) (*entity.EntityHoliday, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromID", arg0)
	ret0, _ := ret[0].(*entity.EntityHoliday)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromID indicates an expected call of GetFromID.
func (mr *MockIRepositoryHolidayMockRecorder) GetFromID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromID", reflect.TypeOf((*MockIRepositoryHoliday)(nil).GetFromID), arg0)
}

// Update mocks base method.
func (m *MockIRepositoryHoliday) Update(arg0 *entity.EntityHoliday) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryHolidayMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepositoryHoliday)(nil).Update), arg0)
}
