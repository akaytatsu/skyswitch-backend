// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/calendar (interfaces: IUsecaseCalendar)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecaseCalendar is a mock of IUsecaseCalendar interface.
type MockIUsecaseCalendar struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseCalendarMockRecorder
}

// MockIUsecaseCalendarMockRecorder is the mock recorder for MockIUsecaseCalendar.
type MockIUsecaseCalendarMockRecorder struct {
	mock *MockIUsecaseCalendar
}

// NewMockIUsecaseCalendar creates a new mock instance.
func NewMockIUsecaseCalendar(ctrl *gomock.Controller) *MockIUsecaseCalendar {
	mock := &MockIUsecaseCalendar{ctrl: ctrl}
	mock.recorder = &MockIUsecaseCalendarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecaseCalendar) EXPECT() *MockIUsecaseCalendarMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUsecaseCalendar) Create(arg0 *entity.EntityCalendar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUsecaseCalendarMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUsecaseCalendar)(nil).Create), arg0)
}

// CreateAllCalendarsJob mocks base method.
func (m *MockIUsecaseCalendar) CreateAllCalendarsJob() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAllCalendarsJob")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAllCalendarsJob indicates an expected call of CreateAllCalendarsJob.
func (mr *MockIUsecaseCalendarMockRecorder) CreateAllCalendarsJob() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAllCalendarsJob", reflect.TypeOf((*MockIUsecaseCalendar)(nil).CreateAllCalendarsJob))
}

// Delete mocks base method.
func (m *MockIUsecaseCalendar) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUsecaseCalendarMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUsecaseCalendar)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockIUsecaseCalendar) Get(arg0 int) (*entity.EntityCalendar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*entity.EntityCalendar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIUsecaseCalendarMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUsecaseCalendar)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *MockIUsecaseCalendar) GetAll(arg0 entity.SearchEntityCalendarParams) ([]entity.EntityCalendar, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]entity.EntityCalendar)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIUsecaseCalendarMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIUsecaseCalendar)(nil).GetAll), arg0)
}

// ProccessCalendar mocks base method.
func (m *MockIUsecaseCalendar) ProccessCalendar(arg0 entity.EntityCalendar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProccessCalendar", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProccessCalendar indicates an expected call of ProccessCalendar.
func (mr *MockIUsecaseCalendarMockRecorder) ProccessCalendar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProccessCalendar", reflect.TypeOf((*MockIUsecaseCalendar)(nil).ProccessCalendar), arg0)
}

// Update mocks base method.
func (m *MockIUsecaseCalendar) Update(arg0 *entity.EntityCalendar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUsecaseCalendarMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUsecaseCalendar)(nil).Update), arg0)
}
