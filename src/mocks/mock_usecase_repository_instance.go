// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/instance (interfaces: IRepositoryInstance)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryInstance is a mock of IRepositoryInstance interface.
type MockIRepositoryInstance struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryInstanceMockRecorder
}

// MockIRepositoryInstanceMockRecorder is the mock recorder for MockIRepositoryInstance.
type MockIRepositoryInstanceMockRecorder struct {
	mock *MockIRepositoryInstance
}

// NewMockIRepositoryInstance creates a new mock instance.
func NewMockIRepositoryInstance(ctrl *gomock.Controller) *MockIRepositoryInstance {
	mock := &MockIRepositoryInstance{ctrl: ctrl}
	mock.recorder = &MockIRepositoryInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryInstance) EXPECT() *MockIRepositoryInstanceMockRecorder {
	return m.recorder
}

// ActiveDeactiveInstance mocks base method.
func (m *MockIRepositoryInstance) ActiveDeactiveInstance(arg0 int64, arg1 bool) (*entity.EntityInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveDeactiveInstance", arg0, arg1)
	ret0, _ := ret[0].(*entity.EntityInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveDeactiveInstance indicates an expected call of ActiveDeactiveInstance.
func (mr *MockIRepositoryInstanceMockRecorder) ActiveDeactiveInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveDeactiveInstance", reflect.TypeOf((*MockIRepositoryInstance)(nil).ActiveDeactiveInstance), arg0, arg1)
}

// CreateInstance mocks base method.
func (m *MockIRepositoryInstance) CreateInstance(arg0 *entity.EntityInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockIRepositoryInstanceMockRecorder) CreateInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockIRepositoryInstance)(nil).CreateInstance), arg0)
}

// DeleteInstance mocks base method.
func (m *MockIRepositoryInstance) DeleteInstance(arg0 *entity.EntityInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockIRepositoryInstanceMockRecorder) DeleteInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockIRepositoryInstance)(nil).DeleteInstance), arg0)
}

// FromCalendar mocks base method.
func (m *MockIRepositoryInstance) FromCalendar(arg0 int) ([]entity.EntityInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromCalendar", arg0)
	ret0, _ := ret[0].([]entity.EntityInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromCalendar indicates an expected call of FromCalendar.
func (mr *MockIRepositoryInstanceMockRecorder) FromCalendar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromCalendar", reflect.TypeOf((*MockIRepositoryInstance)(nil).FromCalendar), arg0)
}

// GetAll mocks base method.
func (m *MockIRepositoryInstance) GetAll(arg0 entity.SearchEntityInstanceParams) ([]entity.EntityInstance, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]entity.EntityInstance)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRepositoryInstanceMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRepositoryInstance)(nil).GetAll), arg0)
}

// GetByID mocks base method.
func (m *MockIRepositoryInstance) GetByID(arg0 int64) (*entity.EntityInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*entity.EntityInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositoryInstanceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepositoryInstance)(nil).GetByID), arg0)
}

// GetByInstanceID mocks base method.
func (m *MockIRepositoryInstance) GetByInstanceID(arg0 string) (*entity.EntityInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByInstanceID", arg0)
	ret0, _ := ret[0].(*entity.EntityInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByInstanceID indicates an expected call of GetByInstanceID.
func (mr *MockIRepositoryInstanceMockRecorder) GetByInstanceID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByInstanceID", reflect.TypeOf((*MockIRepositoryInstance)(nil).GetByInstanceID), arg0)
}

// UpdateInstance mocks base method.
func (m *MockIRepositoryInstance) UpdateInstance(arg0 *entity.EntityInstance, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstance indicates an expected call of UpdateInstance.
func (mr *MockIRepositoryInstanceMockRecorder) UpdateInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockIRepositoryInstance)(nil).UpdateInstance), arg0, arg1)
}
