// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/holiday (interfaces: IUsecaseHoliday)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecaseHoliday is a mock of IUsecaseHoliday interface.
type MockIUsecaseHoliday struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseHolidayMockRecorder
}

// MockIUsecaseHolidayMockRecorder is the mock recorder for MockIUsecaseHoliday.
type MockIUsecaseHolidayMockRecorder struct {
	mock *MockIUsecaseHoliday
}

// NewMockIUsecaseHoliday creates a new mock instance.
func NewMockIUsecaseHoliday(ctrl *gomock.Controller) *MockIUsecaseHoliday {
	mock := &MockIUsecaseHoliday{ctrl: ctrl}
	mock.recorder = &MockIUsecaseHolidayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecaseHoliday) EXPECT() *MockIUsecaseHolidayMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUsecaseHoliday) Create(arg0 *entity.EntityHoliday) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUsecaseHolidayMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUsecaseHoliday)(nil).Create), arg0)
}

// DateStringToTime mocks base method.
func (m *MockIUsecaseHoliday) DateStringToTime(arg0 string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DateStringToTime", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DateStringToTime indicates an expected call of DateStringToTime.
func (mr *MockIUsecaseHolidayMockRecorder) DateStringToTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DateStringToTime", reflect.TypeOf((*MockIUsecaseHoliday)(nil).DateStringToTime), arg0)
}

// Delete mocks base method.
func (m *MockIUsecaseHoliday) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUsecaseHolidayMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUsecaseHoliday)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockIUsecaseHoliday) Get(arg0 int) (*entity.EntityHoliday, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*entity.EntityHoliday)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIUsecaseHolidayMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUsecaseHoliday)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *MockIUsecaseHoliday) GetAll(arg0 entity.SearchEntityHolidayParams) ([]entity.EntityHoliday, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]entity.EntityHoliday)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIUsecaseHolidayMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIUsecaseHoliday)(nil).GetAll), arg0)
}

// IsHoliday mocks base method.
func (m *MockIUsecaseHoliday) IsHoliday(arg0 time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHoliday", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsHoliday indicates an expected call of IsHoliday.
func (mr *MockIUsecaseHolidayMockRecorder) IsHoliday(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHoliday", reflect.TypeOf((*MockIUsecaseHoliday)(nil).IsHoliday), arg0)
}

// Update mocks base method.
func (m *MockIUsecaseHoliday) Update(arg0 *entity.EntityHoliday) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUsecaseHolidayMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUsecaseHoliday)(nil).Update), arg0)
}
